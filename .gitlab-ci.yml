stages:
  - build
  - test
  - sonarqube-check
  - sonarqube-vulnerability-report
  - Docker

build:
  stage: build

  tags:
    - all

  before_script:
    # - |
    #   $headers = @{
    #     "PRIVATE-TOKEN" = "$GITLAB_ACCESCODE"
    #   }
    #   $pipelineStatusUrl = "https://git.fhict.nl/api/v4/projects/54639/pipelines"
    #   $response = Invoke-RestMethod -Uri $pipelineStatusUrl -Headers $headers -Method Get -UseBasicParsing
    #   $runningPipelines = $response | Where-Object { $_.status -eq "running" -or $_.status -eq "pending" }

    #    if ($runningPipelines.Count -eq 0) {
    #     $triggerPipelineUrl = "https://git.fhict.nl/api/v4/projects/54639/trigger/pipeline"
    #     $body = @{
    #       "token" = "$FRONT_END_TOKEN"
    #       "ref" = "main"
    #     }
    #     Invoke-RestMethod -Uri $triggerPipelineUrl -Body $body -Method Post -UseBasicParsing
    #   } 

    # - Invoke-WebRequest -Method Post -Body @{"token"="$FRONT_END_TOKEN"; "ref"="main"} -Uri "https://git.fhict.nl/api/v4/projects/54639/trigger/pipeline" -UseBasicParsing
    - echo $Env:Path;

  script:
    - mvn clean install -X -DskipTests


maven_test:
  stage: test

  tags:
    - all

  before_script:
    - echo $Env:Path
    - mvn clean install -DskipTests

  script:
    - mvn test -X


Docker_building:
  stage: Docker

  tags:
    - docker

  variables:
    DOCKER_IMAGE_NAME: $DOCKER_USERNAME"/semester-3-2023-fontys"
    DOCKER_REGISTRY: "docker.io"

  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin "$DOCKER_REGISTRY"

  script:
    - docker build -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    
  only:
    - main


sonarqube-check:
  stage: sonarqube-check
  image: maven:3-eclipse-temurin-17
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar
  allow_failure: true
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_PIPELINE_SOURCE == 'merge_request_event'
  tags:
    - all

vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - | 
      $token = "${SONAR_TOKEN}"
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${token}:"))
      $headers = @{
          Authorization = "Basic $base64AuthInfo"
      }
      $url = "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=I517297_semester-3-back-end_AYyGaxsbYfOWsWXJQ1a-&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}"
      
      # Log the constructed URL
      Write-Host "Requesting URL: $url"

      Invoke-WebRequest -Uri $url -Headers $headers -OutFile gl-sast-sonar-report.json
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
  
  tags:
    - all


